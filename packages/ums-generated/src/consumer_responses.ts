/* tslint:disable */

/** THIS FILE IS AUTOGENERATED FROM THE UMS JSON SCHEMA FILES. DO NOT EDIT MANUALLY. */

import {InitConnection, UpdateConversationField, ConsumerRequestConversation, PublishEvent, SubscribeMessagingEvents, SubscribeExConversations, UnsubscribeExConversations, ConsumerRequestsEvent, ConsumerRequests} from "./consumer_requests";
import {Omit} from "type-zoo";
import {ISendHandler} from "./common_ums";

export type ConsumerResponses =
  | RequestConversationResponse
  | StringResp
  | PublishEventResponse
  | GenericSubscribeResponse
  | SubscribeExConversationsResponse;
export type RequestConversationResponse = {
  /**
   * Defines that the message is a response
   */
  kind: string;
  /**
   * The ID of the request that originated this response
   */
  reqId: string;
  /**
   * Contains one of the APIs response type names
   */
  type: string;
  /**
   * Response code according to the HTTP status codes standard
   */
  code: number;
  body: any;
  [k: string]: any;
} & {
    type?: string;
    body?: {
      /**
       * The ID of the generated conversation
       */
      conversationId: string;
      [k: string]: any;
    };
    [k: string]: any;
  };
/**
 * General response message with string description.
 */
export type StringResp = {
  /**
   * Defines that the message is a response
   */
  kind: string;
  /**
   * The ID of the request that originated this response
   */
  reqId: string;
  /**
   * Contains one of the APIs response type names
   */
  type: string;
  /**
   * Response code according to the HTTP status codes standard
   */
  code: number;
  body: any;
  [k: string]: any;
} & {
    type?: string;
    /**
     * Optional text description for the response
     */
    body?: string;
    [k: string]: any;
  };
export type PublishEventResponse = {
  /**
   * Defines that the message is a response
   */
  kind: string;
  /**
   * The ID of the request that originated this response
   */
  reqId: string;
  /**
   * Contains one of the APIs response type names
   */
  type: string;
  /**
   * Response code according to the HTTP status codes standard
   */
  code: number;
  body: any;
  [k: string]: any;
} & {
    type?: string;
    body?: {
      /**
       * content and read receipt events get a sequential ID in the conversation.
       */
      sequence?: number;
      [k: string]: any;
    };
    [k: string]: any;
  };
export type GenericSubscribeResponse = {
  /**
   * Defines that the message is a response
   */
  kind: string;
  /**
   * The ID of the request that originated this response
   */
  reqId: string;
  /**
   * Contains one of the APIs response type names
   */
  type: string;
  /**
   * Response code according to the HTTP status codes standard
   */
  code: number;
  body: any;
  [k: string]: any;
} & {
    type?: string;
    body?: {
      [k: string]: any;
    };
    [k: string]: any;
  };
export type SubscribeExConversationsResponse = {
  /**
   * Defines that the message is a response
   */
  kind: string;
  /**
   * The ID of the request that originated this response
   */
  reqId: string;
  /**
   * Contains one of the APIs response type names
   */
  type: string;
  /**
   * Response code according to the HTTP status codes standard
   */
  code: number;
  body: any;
  [k: string]: any;
} & {
    type?: string;
    body?: {
      subscriptionId: string;
      [k: string]: any;
    };
    [k: string]: any;
  };

export const enum ConsumerResponsesEvent {
  RequestConversationResponse = "cm.RequestConversationResponse",
  StringResp = ".ReqBody$StringResp",
  PublishEventResponse = "ms.PublishEventResponse",
  GenericSubscribeResponse = "GenericSubscribeResponse",
  SubscribeExConversationsResponse = "cqm.SubscribeExConversationsResponse"
}

export interface IConsumerResponsesType {
  "cm.RequestConversationResponse": RequestConversationResponse;
  ".ReqBody$StringResp": StringResp;
  "ms.PublishEventResponse": PublishEventResponse;
  "GenericSubscribeResponse": GenericSubscribeResponse;
  "cqm.SubscribeExConversationsResponse": SubscribeExConversationsResponse;
}

export type ConsumerResponsesType = "cm.RequestConversationResponse" | ".ReqBody$StringResp" | "ms.PublishEventResponse" | "GenericSubscribeResponse" | "cqm.SubscribeExConversationsResponse";

export const ConsumerResponsesEvents = ["RequestConversationResponse", "StringResp", "PublishEventResponse", "GenericSubscribeResponse", "SubscribeExConversationsResponse"], ConsumerResponsesTypes = ["cm.RequestConversationResponse", ".ReqBody$StringResp", "ms.PublishEventResponse", "GenericSubscribeResponse", "cqm.SubscribeExConversationsResponse"];

export interface IConsumerResponsesWrapper {
  doInitConnection(data: Omit<InitConnection, "type">): Promise<StringResp>;
  doUpdateConversationField(data: Omit<UpdateConversationField, "type">): Promise<StringResp>;
  doConsumerRequestConversation(data: Omit<ConsumerRequestConversation, "type">): Promise<RequestConversationResponse>;
  doPublishEvent(data: Omit<PublishEvent, "type">): Promise<PublishEventResponse>;
  doSubscribeMessagingEvents(data: Omit<SubscribeMessagingEvents, "type">): Promise<GenericSubscribeResponse>;
  doSubscribeExConversations(data: Omit<SubscribeExConversations, "type">): Promise<SubscribeExConversationsResponse>;
  doUnsubscribeExConversations(data: Omit<UnsubscribeExConversations, "type">): Promise<StringResp>;
}

export type Constructor<T extends ISendHandler<ConsumerRequests, ConsumerResponses>> = new (...args: any[]) => T;

export function wrapConsumerResponses<T extends Constructor<ISendHandler<ConsumerRequests, ConsumerResponses>>>(Base: T) : XConstructor<T> {

  class ConsumerResponsesWrapper extends Base implements IConsumerResponsesWrapper {
    constructor(...args) {
      super(...args);
    }

    doInitConnection(data: Omit<InitConnection, "type">): Promise<StringResp> {
      return this.sendMessage(Object.assign(data, {type: ConsumerRequestsEvent.InitConnection}) as InitConnection);
    }

    doUpdateConversationField(data: Omit<UpdateConversationField, "type">): Promise<StringResp> {
      return this.sendMessage(Object.assign(data, {type: ConsumerRequestsEvent.UpdateConversationField}) as UpdateConversationField);
    }

    doConsumerRequestConversation(data: Omit<ConsumerRequestConversation, "type">): Promise<RequestConversationResponse> {
      return this.sendMessage(Object.assign(data, {type: ConsumerRequestsEvent.ConsumerRequestConversation}) as ConsumerRequestConversation);
    }

    doPublishEvent(data: Omit<PublishEvent, "type">): Promise<PublishEventResponse> {
      return this.sendMessage(Object.assign(data, {type: ConsumerRequestsEvent.PublishEvent}) as PublishEvent);
    }

    doSubscribeMessagingEvents(data: Omit<SubscribeMessagingEvents, "type">): Promise<GenericSubscribeResponse> {
      return this.sendMessage(Object.assign(data, {type: ConsumerRequestsEvent.SubscribeMessagingEvents}) as SubscribeMessagingEvents);
    }

    doSubscribeExConversations(data: Omit<SubscribeExConversations, "type">): Promise<SubscribeExConversationsResponse> {
      return this.sendMessage(Object.assign(data, {type: ConsumerRequestsEvent.SubscribeExConversations}) as SubscribeExConversations);
    }

    doUnsubscribeExConversations(data: Omit<UnsubscribeExConversations, "type">): Promise<StringResp> {
      return this.sendMessage(Object.assign(data, {type: ConsumerRequestsEvent.UnsubscribeExConversations}) as UnsubscribeExConversations);
    }
  }
  return ConsumerResponsesWrapper;
}
