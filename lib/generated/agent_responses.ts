/* tslint:disable */

/** THIS FILE IS AUTOGENERATED FROM THE UMS JSON SCHEMA FILES. DO NOT EDIT MANUALLY. */

export type AgentResponses =
  | RequestConversationResponse
  | StringResp
  | PublishEventResponse
  | GenericSubscribeResponse
  | GetUserProfileResponse
  | SubscribeExConversationsResponse;
export type RequestConversationResponse = {
  /**
   * Defines that the message is a response
   */
  kind: string;
  /**
   * The ID of the request that originated this response
   */
  reqId: string;
  /**
   * Contains one of the APIs response type names
   */
  type: string;
  /**
   * Response code according to the HTTP status codes standard
   */
  code: number;
  body: any;
  [k: string]: any;
} & {
    type?: string;
    body?: {
      /**
       * The ID of the generated conversation
       */
      conversationId: string;
      [k: string]: any;
    };
    [k: string]: any;
  };
/**
 * General response message with string description.
 */
export type StringResp = {
  /**
   * Defines that the message is a response
   */
  kind: string;
  /**
   * The ID of the request that originated this response
   */
  reqId: string;
  /**
   * Contains one of the APIs response type names
   */
  type: string;
  /**
   * Response code according to the HTTP status codes standard
   */
  code: number;
  body: any;
  [k: string]: any;
} & {
    type?: string;
    /**
     * Optional text description for the response
     */
    body?: string;
    [k: string]: any;
  };
export type PublishEventResponse = {
  /**
   * Defines that the message is a response
   */
  kind: string;
  /**
   * The ID of the request that originated this response
   */
  reqId: string;
  /**
   * Contains one of the APIs response type names
   */
  type: string;
  /**
   * Response code according to the HTTP status codes standard
   */
  code: number;
  body: any;
  [k: string]: any;
} & {
    type?: string;
    body?: {
      /**
       * content and read receipt events get a sequential ID in the conversation.
       */
      sequence?: number;
      [k: string]: any;
    };
    [k: string]: any;
  };
export type GenericSubscribeResponse = {
  /**
   * Defines that the message is a response
   */
  kind: string;
  /**
   * The ID of the request that originated this response
   */
  reqId: string;
  /**
   * Contains one of the APIs response type names
   */
  type: string;
  /**
   * Response code according to the HTTP status codes standard
   */
  code: number;
  body: any;
  [k: string]: any;
} & {
    type?: string;
    body?: {
      [k: string]: any;
    };
    [k: string]: any;
  };
/**
 * Gets customer and personal info for the given consumerId.
 */
export type GetUserProfileResponse = {
  /**
   * Defines that the message is a response
   */
  kind: string;
  /**
   * The ID of the request that originated this response
   */
  reqId: string;
  /**
   * Contains one of the APIs response type names
   */
  type: string;
  /**
   * Response code according to the HTTP status codes standard
   */
  code: number;
  body: any;
  [k: string]: any;
} & {
    type?: "up.GetUserProfile$Response";
    body: (CustomerInfo | PersonalInfo)[];
    [k: string]: any;
  };
export type SubscribeExConversationsResponse = {
  /**
   * Defines that the message is a response
   */
  kind: string;
  /**
   * The ID of the request that originated this response
   */
  reqId: string;
  /**
   * Contains one of the APIs response type names
   */
  type: string;
  /**
   * Response code according to the HTTP status codes standard
   */
  code: number;
  body: any;
  [k: string]: any;
} & {
    type?: string;
    body?: {
      subscriptionId: string;
      [k: string]: any;
    };
    [k: string]: any;
  };

/**
 * Customer Infomration
 */
export interface CustomerInfo {
  type: string;
  auth?: {
    amr?: (
      | "face"
      | "fpt"
      | "geo"
      | "hwk"
      | "iris"
      | "kba"
      | "mca"
      | "mfa"
      | "otp"
      | "pin"
      | "pwd"
      | "rba"
      | "retina"
      | "sc"
      | "sms"
      | "swk"
      | "tel"
      | "user"
      | "vbm"
      | "wia")[];
    /**
     * Issuer URI
     */
    iss?: string;
    [k: string]: any;
  };
  info: {
    /**
     * CUSTOMER LIFECYCLE STATUS. FROM PRE-DEFINED LIST.
     */
    cstatus?: string;
    /**
     * CUSTOMER TYPE OR TIER. FROM PRE-DEFINED LIST
     */
    ctype?: string;
    /**
     * UNIQUE CUSTOMER IDENTIFIER
     */
    customerId?: string;
    /**
     * THE CUSTOMER FINANCIAL BALANCE IN DECIMAL VALUE
     */
    balance?: number;
    /**
     * SOCIAL ID OF YOUR CHOICE: FACEBOOK, TWITTER ETC...
     */
    socialId?: string;
    /**
     * UNIQUE DEVICE OR PHONE IDENTIFIER
     */
    imei?: string;
    /**
     * CONSUMER NICKNAME OR USERNAME
     */
    userName?: string;
    /**
     * COMPANY SIZE MEASURED BY NUMBER OF EMPLOYEES
     */
    companySize?: number;
    /**
     * THE CUSTOMER'S COMPANY NAME
     */
    accountName?: string;
    /**
     * CONSUMER ROLE TITLE
     */
    role?: string;
    lastPaymentDate?: {
      day: number;
      month: number;
      year: number;
      [k: string]: any;
    };
    registrationDate?: {
      day: number;
      month: number;
      year: number;
      [k: string]: any;
    };
    [k: string]: any;
  };
  [k: string]: any;
}
/**
 * Personal Infomration
 */
export interface PersonalInfo {
  type: string;
  auth?: {
    amr?: (
      | "face"
      | "fpt"
      | "geo"
      | "hwk"
      | "iris"
      | "kba"
      | "mca"
      | "mfa"
      | "otp"
      | "pin"
      | "pwd"
      | "rba"
      | "retina"
      | "sc"
      | "sms"
      | "swk"
      | "tel"
      | "user"
      | "vbm"
      | "wia")[];
    /**
     * Issuer URI
     */
    iss?: string;
    [k: string]: any;
  };
  personal: {
    firstname?: string;
    lastname?: string;
    age?: {
      age?: number;
      year?: number;
      month?: number;
      day?: number;
      [k: string]: any;
    };
    contacts?: {
      email?: string;
      phone?: string;
      [k: string]: any;
    }[];
    gender?: "MALE" | "FEMALE" | "OTHER";
    language?: string;
    /**
     * Company name.
     */
    company?: string;
    [k: string]: any;
  };
  [k: string]: any;
}

export const enum AgentResponsesEvent {
  RequestConversationResponse = "cm.RequestConversationResponse",
  StringResp = ".ReqBody$StringResp",
  PublishEventResponse = "ms.PublishEventResponse",
  GenericSubscribeResponse = "GenericSubscribeResponse",
  GetUserProfileResponse = "up.GetUserProfile$Response",
  SubscribeExConversationsResponse = "cqm.SubscribeExConversationsResponse"
}

export interface IAgentResponsesType {
  "cm.RequestConversationResponse": RequestConversationResponse;
  ".ReqBody$StringResp": StringResp;
  "ms.PublishEventResponse": PublishEventResponse;
  "GenericSubscribeResponse": GenericSubscribeResponse;
  "up.GetUserProfile$Response": GetUserProfileResponse;
  "cqm.SubscribeExConversationsResponse": SubscribeExConversationsResponse;
}

export type AgentResponsesType = "cm.RequestConversationResponse" | ".ReqBody$StringResp" | "ms.PublishEventResponse" | "GenericSubscribeResponse" | "up.GetUserProfile$Response" | "cqm.SubscribeExConversationsResponse";

export const AgentResponsesEvents = ["RequestConversationResponse", "StringResp", "PublishEventResponse", "GenericSubscribeResponse", "GetUserProfileResponse", "SubscribeExConversationsResponse"], AgentResponsesTypes = ["cm.RequestConversationResponse", ".ReqBody$StringResp", "ms.PublishEventResponse", "GenericSubscribeResponse", "up.GetUserProfile$Response", "cqm.SubscribeExConversationsResponse"];
