/* tslint:disable */

/** THIS FILE IS AUTOGENERATED FROM THE UMS JSON SCHEMA FILES. DO NOT EDIT MANUALLY. */

export type ConsumerRequests =
  | InitConnection
  | UpdateConversationField
  | ConsumerRequestConversation
  | PublishEvent
  | SubscribeMessagingEvents
  | SubscribeExConversations
  | UnsubscribeExConversations;
/**
 * This request is needed only for clients that cannot send websocket headers. It can include the authentication and the clientProperties information.
 */
export type InitConnection = {
  /**
   * Defines that the message is a request
   */
  kind?: string;
  /**
   * Request ID generated by the client. It should be unique per WebSocket session in order to identify the request. This ID will be reflected by the server in the response to the request.
   */
  id: string;
  /**
   * Contains one of the APIs request type names
   */
  type: string;
  metadata?: (ActionReason | BotResponse | IbmWatsonInfo | ExternalId)[];
  [k: string]: any;
} & {
    type?: "InitConnection";
    headers: (ClientProperties | ConsumerAuthentication)[];
    [k: string]: any;
  };
export type UpdateConversationField = {
  /**
   * Defines that the message is a request
   */
  kind?: string;
  /**
   * Request ID generated by the client. It should be unique per WebSocket session in order to identify the request. This ID will be reflected by the server in the response to the request.
   */
  id: string;
  /**
   * Contains one of the APIs request type names
   */
  type: string;
  metadata?: (ActionReason | BotResponse | IbmWatsonInfo | ExternalId)[];
  [k: string]: any;
} & {
    type?: "cm.UpdateConversationField";
    /**
     * Updates conversation metadata like: state, CSAT, TimeToRespond police etc... Consumer and agent might have different permissions.
     */
    body: {
      conversationId: string;
      conversationField: (StateChange | ParticipantsChangeForAgents | SkillChange | TtrChange | CsatChange)[];
      [k: string]: any;
    };
    [k: string]: any;
  };
/**
 * This request is used by the consumer to request a new conversation
 */
export type ConsumerRequestConversation = {
  /**
   * Defines that the message is a request
   */
  kind?: string;
  /**
   * Request ID generated by the client. It should be unique per WebSocket session in order to identify the request. This ID will be reflected by the server in the response to the request.
   */
  id: string;
  /**
   * Contains one of the APIs request type names
   */
  type: string;
  metadata?: (ActionReason | BotResponse | IbmWatsonInfo | ExternalId)[];
  [k: string]: any;
} & {
    type?: "cm.ConsumerRequestConversation";
    [k: string]: any;
  };
/**
 * Publishes events to existing dialog. Events can be: <ul><li>text-content</li><li>rich-content (structured content) - for more information about the supported structured content templates please refer to the Structured Content Templates page.</li><li>photo-reference-content</li><li>read-reciepts (accept status)</li><li>presense/typing events (chat-state)</li></ul>
 */
export type PublishEvent = {
  /**
   * Defines that the message is a request
   */
  kind?: string;
  /**
   * Request ID generated by the client. It should be unique per WebSocket session in order to identify the request. This ID will be reflected by the server in the response to the request.
   */
  id: string;
  /**
   * Contains one of the APIs request type names
   */
  type: string;
  metadata?: (ActionReason | BotResponse | IbmWatsonInfo | ExternalId)[];
  [k: string]: any;
} & {
    type?: "ms.PublishEvent";
    body: {
      dialogId: string;
      event: TextValue | RichContentEvent | HostedFile | ChatStateEvent | AcceptStatusEvent;
      [k: string]: any;
    };
    [k: string]: any;
  };
/**
 * Subscribes to get the events of a conversation. Existing events will be sent immediately, while new events will be notified as they happen.
 */
export type SubscribeMessagingEvents = {
  /**
   * Defines that the message is a request
   */
  kind?: string;
  /**
   * Request ID generated by the client. It should be unique per WebSocket session in order to identify the request. This ID will be reflected by the server in the response to the request.
   */
  id: string;
  /**
   * Contains one of the APIs request type names
   */
  type: string;
  metadata?: (ActionReason | BotResponse | IbmWatsonInfo | ExternalId)[];
  [k: string]: any;
} & {
    type?: "ms.SubscribeMessagingEvents";
    body: {
      /**
       * Fetch events with sequence greater or equal to this value
       */
      fromSeq?: number;
      dialogId: string;
      [k: string]: any;
    };
    [k: string]: any;
  };
/**
 * Subscribes to any changes in the medata of the conversations of this user. Existing conversations that matches the filter will also be sent.<h4>Responses</h4><ul><li>200: SubscribeExConversationsResponse</li><li>Notification: ExConversationChangeNotification</li></ul>
 */
export type SubscribeExConversations = {
  /**
   * Defines that the message is a request
   */
  kind?: string;
  /**
   * Request ID generated by the client. It should be unique per WebSocket session in order to identify the request. This ID will be reflected by the server in the response to the request.
   */
  id: string;
  /**
   * Contains one of the APIs request type names
   */
  type: string;
  metadata?: (ActionReason | BotResponse | IbmWatsonInfo | ExternalId)[];
  [k: string]: any;
} & {
    type?: "cqm.SubscribeExConversations";
    body?: {
      /**
       * Do not fetch conversation which have not been updated after this timestamp
       */
      minLastUpdatedTime?: number;
      convState?: ("OPEN" | "CLOSE")[];
      [k: string]: any;
    };
    [k: string]: any;
  };
/**
 * Unsubcribes the user from getting notifications on conversation metadata changes.
 */
export type UnsubscribeExConversations = {
  /**
   * Defines that the message is a request
   */
  kind?: string;
  /**
   * Request ID generated by the client. It should be unique per WebSocket session in order to identify the request. This ID will be reflected by the server in the response to the request.
   */
  id: string;
  /**
   * Contains one of the APIs request type names
   */
  type: string;
  metadata?: (ActionReason | BotResponse | IbmWatsonInfo | ExternalId)[];
  [k: string]: any;
} & {
    type?: "cqm.UnsubscribeExConversations";
    body: {
      subscriptionId: string;
      [k: string]: any;
    };
    [k: string]: any;
  };

/**
 * Reason information while the conversation is being escalated by a bot to a human agent
 */
export interface ActionReason {
  type: "ActionReason";
  reasonId?: string;
  reason?: string;
}
/**
 * Information coming back from the bot provider
 */
export interface BotResponse {
  type: "BotResponse";
  externalConversationId?: string;
  businessCases?: string[];
  intents?: {
    name?: string;
    id: string;
    confidence: number;
    [k: string]: any;
  }[];
}
/**
 * Information coming back from the IBM Watson virtual agent
 */
export interface IbmWatsonInfo {
  type: "IBMWatsonInfo";
  branch_exited?: boolean;
  branch_exited_reason?: string;
  capability?: string;
  nodes_visited?: string[];
  referred_capability?: string;
  referred_nodes?: string[];
  referred_visitor_message_sequences: number[];
  entities?: {
    entity?: string;
    location?: number[];
    value?: string;
    [k: string]: any;
  }[];
}
/**
 * External id of the action was made
 */
export interface ExternalId {
  type: "ExternalId";
  id: string;
}
/**
 * Information about the client: hardware, software, timeZone, IP etc...
 */
export interface ClientProperties {
  type: ".ams.headers.ClientProperties";
  /**
   * Identifies the application
   */
  appId?: string;
  /**
   * The application version, for example, in the case of mobile it will be the host app version
   */
  appVersion?: string;
  ipAddress?: string;
  deviceFamily?: "DESKTOP" | "TABLET" | "MOBILE" | "OTHER";
  os?: "WINDOWS" | "LINUX" | "OSX" | "ANDROID" | "IOS" | "OTHER";
  /**
   * Specifies the operating system version, and distribution type (if relevant)
   *  Examples: Ubuntu 15.00
   */
  osVersion?: string;
  /**
   * OS name is a text describing the operating system
   *  Examples: WindowsXP
   */
  osName?: string;
  integration?: "WEB_SDK" | "MOBILE_SDK" | "BRAND_SDK";
  integrationVersion?: string;
  /**
   * For example: chrome, firefox, etc...
   */
  browser?: string;
  /**
   * Detailed version info of the user agent (browser or host-application)
   */
  browserVersion?: string;
  /**
   * For example: "America/Los_Angeles"
   */
  timeZone?: string;
  /**
   * For example LG, HP, Microsoft....
   */
  deviceManufacture?: string;
  /**
   * For example for G3 for LG, iPhone6s for Apple...
   */
  deviceModel?: string;
  /**
   * Some of the client capablities are not supported by default. In order to enable them, the client should include the feature name in this field.
   */
  features?: ("CO_BROWSE" | "CO_APP" | "PHOTO_SHARING" | "SECURE_FORMS" | "AUTO_MESSAGES" | "RICH_CONTENT")[];
  [k: string]: any;
}
/**
 * Information about the client: hardware, software, timeZone, IP etc...
 */
export interface ConsumerAuthentication {
  type: ".ams.headers.ConsumerAuthentication";
  /**
   * jwt issued by LivePerson idp service for this consumer
   */
  jwt: string;
  [k: string]: any;
}
export interface StateChange {
  field: "ConversationStateField";
  conversationState: "CLOSE";
  [k: string]: any;
}
export interface ParticipantsChangeForAgents {
  field: "ParticipantsChange";
  type: "ADD" | "REMOVE" | "UPDATE";
  role: "MANAGER" | "READER" | "ASSIGNED_AGENT";
  [k: string]: any;
}
export interface SkillChange {
  field: "Skill";
  type: "UPDATE";
  skill: string;
  [k: string]: any;
}
export interface TtrChange {
  field: "TTRField";
  /**
   * Label for the given TTR
   */
  ttrType: "CUSTOM" | "NORMAL" | "PRIORITIZED" | "URGENT";
  /**
   * Seconds from consumer input till agent response
   */
  value: number;
  [k: string]: any;
}
/**
 * Consumer satisfaction information. The data that was submitted by the consumer after the conversation was closed.
 */
export interface CsatChange {
  field: "CSATRate";
  csatRate: 1 | 2 | 3 | 4 | 5;
  csatResolutionConfirmation: boolean;
  status: "FILLED" | "PARTIALLY_FILLED" | "SKIPPED";
  [k: string]: any;
}
export interface TextValue {
  type: string;
  contentType: string;
  message: string;
  [k: string]: any;
}
export interface RichContentEvent {
  type: "RichContentEvent";
  content?: Element;
  [k: string]: any;
}
/**
 * Refer to Structured Content documentation
 */
export interface Element {
  [k: string]: any;
}
export interface HostedFile {
  type: string;
  contentType: string;
  message: {
    caption: string;
    relativePath: string;
    fileType: "IMG" | "JPG" | "PNG" | "GIF" | "TXT" | "PDF";
    preview?: any;
    [k: string]: any;
  };
  [k: string]: any;
}
export interface ChatStateEvent {
  type: string;
  chatState: "ACTIVE" | "INACTIVE" | "GONE" | "COMPOSING" | "PAUSE";
  [k: string]: any;
}
export interface AcceptStatusEvent {
  type: string;
  status: "ACCEPT" | "READ" | "ACCESS" | "NACK" | "ACTION";
  sequenceList: number[];
  [k: string]: any;
}

export const enum ConsumerRequestsEvent {
  InitConnection = "InitConnection",
  UpdateConversationField = "cm.UpdateConversationField",
  ConsumerRequestConversation = "cm.ConsumerRequestConversation",
  PublishEvent = "ms.PublishEvent",
  SubscribeMessagingEvents = "ms.SubscribeMessagingEvents",
  SubscribeExConversations = "cqm.SubscribeExConversations",
  UnsubscribeExConversations = "cqm.UnsubscribeExConversations"
}

export interface IConsumerRequestsType {
  "InitConnection": InitConnection;
  "cm.UpdateConversationField": UpdateConversationField;
  "cm.ConsumerRequestConversation": ConsumerRequestConversation;
  "ms.PublishEvent": PublishEvent;
  "ms.SubscribeMessagingEvents": SubscribeMessagingEvents;
  "cqm.SubscribeExConversations": SubscribeExConversations;
  "cqm.UnsubscribeExConversations": UnsubscribeExConversations;
}

export type ConsumerRequestsType = "InitConnection" | "cm.UpdateConversationField" | "cm.ConsumerRequestConversation" | "ms.PublishEvent" | "ms.SubscribeMessagingEvents" | "cqm.SubscribeExConversations" | "cqm.UnsubscribeExConversations";

export const ConsumerRequestsEvents = ["InitConnection", "UpdateConversationField", "ConsumerRequestConversation", "PublishEvent", "SubscribeMessagingEvents", "SubscribeExConversations", "UnsubscribeExConversations"], ConsumerRequestsTypes = ["InitConnection", "cm.UpdateConversationField", "cm.ConsumerRequestConversation", "ms.PublishEvent", "ms.SubscribeMessagingEvents", "cqm.SubscribeExConversations", "cqm.UnsubscribeExConversations"];
