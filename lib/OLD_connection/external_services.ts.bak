

// import { decode } from "jsonwebtoken"; // https://github.com/auth0/node-jsonwebtoken#jwtdecodetoken--options

import { HEADER } from "../shared/const";
import {
  CsdsServiceConfig,
  CsdsConfig,
  CsdsResponse,
  AgentConfig,
  ConsumerConfig,
  IAgentLoginData,
  IUserEntry,
  ITokenResponse,
  IAgentProfile,
  IAcCdnConfig,
} from "../shared/lp_services";
import { isAgentPasswordConfig, isAgentTokenConfig, getCsdsDomain, atob } from "../shared/util";

const jsResponseToJson = (js: string): any => JSON.parse(js.substring(js.indexOf("{"), js.lastIndexOf("}") + 1));
const isAcCdnConfig = (conf: AgentConfig|IAcCdnConfig): conf is IAcCdnConfig => "acCdnDomain" in conf;

export const resolveConsumerDomains = (options: CsdsServiceConfig): Promise<string> => {
  return resolveDomain(options);
  // TODO: do we need some different api call for consumers than agents?!?
  /*const url = `https://${csdsDomain}/csdr/account/${accountId}/service/${serviceName}/baseURI.lpCsds?version=1.0`;
  const { body, statusCode, statusMessage } = await doRequest(get, [{ url, json: true, resolveWithFullResponse: true }]);

  body = JSON.parse(body.substring(body.indexOf("{"), body.lastIndexOf("}") + 1));

  if (body.ResultSet.lpCallError) {
    reject(body.ResultSet.lpCallError)
  } else {
    resolve(body.ResultSet.lpData[0].lpServer);
  }*/
};

export const generateToken = async (config: ConsumerConfig, idpDomain?: string): Promise<ITokenResponse> => {
  const { accountId, csdsDomain } = config;
  const domain = idpDomain || await resolveDomain({accountId, csdsDomain, service: "idp"});
  const url = `https://${domain}/api/account/${accountId}/signup`;

  const { body } = await doRequest(post, [{ url, json: true, resolveWithFullResponse: true }]);
  return { token: body.jwt, id: JSON.parse(atob(body.jwt.split(".")[1])).sub };
};

export const getAgentUser = async (config: AgentConfig, loginData: IAgentLoginData, accountConfigDomain?: string): Promise<IUserEntry> => {
  const { accountId, csdsDomain } = config;
  const { credentials } = loginData;
  const domain = accountConfigDomain || await resolveDomain({accountId, csdsDomain, service: "accountConfigReadOnly"});
  const url = `https://${domain}/api/account/${accountId}/configuration/le-users/users/${credentials.config.userId}?v=4.0&select=$all"`;
  const headers = {
    "Authorization": `Bearer ${credentials.bearer}`,
    "User-Agent": HEADER,
  };

  const { body } = await doRequest(get, [{ url, headers, json: true, resolveWithFullResponse: true }]);
  return body;
};

export const getAgentProfile = async (agentId: string, config: AgentConfig|IAcCdnConfig): Promise<IAgentProfile> => {
  const domain = isAcCdnConfig(config)
    ? config.acCdnDomain
    : await resolveDomain({accountId: config.accountId, csdsDomain: config.csdsDomain, service: "acCdnDomain"});
  const url = `https://${domain}/api/account/${config.accountId}/configuration/le-users/users/${agentId}`;

  const { body } = await doRequest(get, [{ url, resolveWithFullResponse: true }]);
  return jsResponseToJson(body);
};
